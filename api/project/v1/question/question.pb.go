// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.26.1
// source: api/project/v1/question/question.proto

package questionv1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	common "helloworld/api/project/v1/common"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 题目基础信息
type QuestionBaseInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`                         // 题目类型
	Content       string                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`                   // 题目内容
	ImageUrl      string                 `protobuf:"bytes,3,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"` // 题目图片
	Difficulty    float32                `protobuf:"fixed32,4,opt,name=difficulty,proto3" json:"difficulty,omitempty"`           // 题目难度
	Knowledge     string                 `protobuf:"bytes,5,opt,name=knowledge,proto3" json:"knowledge,omitempty"`               // 题目知识点
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuestionBaseInfo) Reset() {
	*x = QuestionBaseInfo{}
	mi := &file_api_project_v1_question_question_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuestionBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionBaseInfo) ProtoMessage() {}

func (x *QuestionBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_project_v1_question_question_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionBaseInfo.ProtoReflect.Descriptor instead.
func (*QuestionBaseInfo) Descriptor() ([]byte, []int) {
	return file_api_project_v1_question_question_proto_rawDescGZIP(), []int{0}
}

func (x *QuestionBaseInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *QuestionBaseInfo) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *QuestionBaseInfo) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *QuestionBaseInfo) GetDifficulty() float32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *QuestionBaseInfo) GetKnowledge() string {
	if x != nil {
		return x.Knowledge
	}
	return ""
}

// 选择题信息
type QuestionChoiceInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BaseInfo      *QuestionBaseInfo      `protobuf:"bytes,2,opt,name=base_info,json=baseInfo,proto3" json:"base_info,omitempty"`
	OptionA       string                 `protobuf:"bytes,3,opt,name=option_a,json=optionA,proto3" json:"option_a,omitempty"`
	OptionB       string                 `protobuf:"bytes,4,opt,name=option_b,json=optionB,proto3" json:"option_b,omitempty"`
	OptionC       string                 `protobuf:"bytes,5,opt,name=option_c,json=optionC,proto3" json:"option_c,omitempty"`
	OptionD       string                 `protobuf:"bytes,6,opt,name=option_d,json=optionD,proto3" json:"option_d,omitempty"`
	Answer        string                 `protobuf:"bytes,7,opt,name=answer,proto3" json:"answer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuestionChoiceInfo) Reset() {
	*x = QuestionChoiceInfo{}
	mi := &file_api_project_v1_question_question_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuestionChoiceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionChoiceInfo) ProtoMessage() {}

func (x *QuestionChoiceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_project_v1_question_question_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionChoiceInfo.ProtoReflect.Descriptor instead.
func (*QuestionChoiceInfo) Descriptor() ([]byte, []int) {
	return file_api_project_v1_question_question_proto_rawDescGZIP(), []int{1}
}

func (x *QuestionChoiceInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QuestionChoiceInfo) GetBaseInfo() *QuestionBaseInfo {
	if x != nil {
		return x.BaseInfo
	}
	return nil
}

func (x *QuestionChoiceInfo) GetOptionA() string {
	if x != nil {
		return x.OptionA
	}
	return ""
}

func (x *QuestionChoiceInfo) GetOptionB() string {
	if x != nil {
		return x.OptionB
	}
	return ""
}

func (x *QuestionChoiceInfo) GetOptionC() string {
	if x != nil {
		return x.OptionC
	}
	return ""
}

func (x *QuestionChoiceInfo) GetOptionD() string {
	if x != nil {
		return x.OptionD
	}
	return ""
}

func (x *QuestionChoiceInfo) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

// 填空题信息
type QuestionFillInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BaseInfo      *QuestionBaseInfo      `protobuf:"bytes,2,opt,name=base_info,json=baseInfo,proto3" json:"base_info,omitempty"`
	Answer        string                 `protobuf:"bytes,3,opt,name=answer,proto3" json:"answer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuestionFillInfo) Reset() {
	*x = QuestionFillInfo{}
	mi := &file_api_project_v1_question_question_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuestionFillInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionFillInfo) ProtoMessage() {}

func (x *QuestionFillInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_project_v1_question_question_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionFillInfo.ProtoReflect.Descriptor instead.
func (*QuestionFillInfo) Descriptor() ([]byte, []int) {
	return file_api_project_v1_question_question_proto_rawDescGZIP(), []int{2}
}

func (x *QuestionFillInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QuestionFillInfo) GetBaseInfo() *QuestionBaseInfo {
	if x != nil {
		return x.BaseInfo
	}
	return nil
}

func (x *QuestionFillInfo) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

// 判断题信息
type QuestionJudgeInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BaseInfo      *QuestionBaseInfo      `protobuf:"bytes,2,opt,name=base_info,json=baseInfo,proto3" json:"base_info,omitempty"`
	Answer        bool                   `protobuf:"varint,3,opt,name=answer,proto3" json:"answer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuestionJudgeInfo) Reset() {
	*x = QuestionJudgeInfo{}
	mi := &file_api_project_v1_question_question_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuestionJudgeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionJudgeInfo) ProtoMessage() {}

func (x *QuestionJudgeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_project_v1_question_question_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionJudgeInfo.ProtoReflect.Descriptor instead.
func (*QuestionJudgeInfo) Descriptor() ([]byte, []int) {
	return file_api_project_v1_question_question_proto_rawDescGZIP(), []int{3}
}

func (x *QuestionJudgeInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QuestionJudgeInfo) GetBaseInfo() *QuestionBaseInfo {
	if x != nil {
		return x.BaseInfo
	}
	return nil
}

func (x *QuestionJudgeInfo) GetAnswer() bool {
	if x != nil {
		return x.Answer
	}
	return false
}

// 简答题/大题信息
type QuestionEssayInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BaseInfo      *QuestionBaseInfo      `protobuf:"bytes,2,opt,name=base_info,json=baseInfo,proto3" json:"base_info,omitempty"`
	Reference     string                 `protobuf:"bytes,3,opt,name=reference,proto3" json:"reference,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuestionEssayInfo) Reset() {
	*x = QuestionEssayInfo{}
	mi := &file_api_project_v1_question_question_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuestionEssayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionEssayInfo) ProtoMessage() {}

func (x *QuestionEssayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_project_v1_question_question_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionEssayInfo.ProtoReflect.Descriptor instead.
func (*QuestionEssayInfo) Descriptor() ([]byte, []int) {
	return file_api_project_v1_question_question_proto_rawDescGZIP(), []int{4}
}

func (x *QuestionEssayInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QuestionEssayInfo) GetBaseInfo() *QuestionBaseInfo {
	if x != nil {
		return x.BaseInfo
	}
	return nil
}

func (x *QuestionEssayInfo) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

// 删除题目请求
type DeleteQuestionReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteQuestionReq) Reset() {
	*x = DeleteQuestionReq{}
	mi := &file_api_project_v1_question_question_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteQuestionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQuestionReq) ProtoMessage() {}

func (x *DeleteQuestionReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_project_v1_question_question_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQuestionReq.ProtoReflect.Descriptor instead.
func (*DeleteQuestionReq) Descriptor() ([]byte, []int) {
	return file_api_project_v1_question_question_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteQuestionReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// 获取题目列表请求
type GetQuestionListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32                  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetQuestionListReq) Reset() {
	*x = GetQuestionListReq{}
	mi := &file_api_project_v1_question_question_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQuestionListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionListReq) ProtoMessage() {}

func (x *GetQuestionListReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_project_v1_question_question_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionListReq.ProtoReflect.Descriptor instead.
func (*GetQuestionListReq) Descriptor() ([]byte, []int) {
	return file_api_project_v1_question_question_proto_rawDescGZIP(), []int{6}
}

func (x *GetQuestionListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetQuestionListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 获取题目列表响应
type GetQuestionListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CommonResp    *common.CommonResp     `protobuf:"bytes,1,opt,name=common_resp,json=commonResp,proto3" json:"common_resp,omitempty"`
	Questions     []*QuestionInfo        `protobuf:"bytes,2,rep,name=questions,proto3" json:"questions,omitempty"`
	Total         int32                  `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetQuestionListResp) Reset() {
	*x = GetQuestionListResp{}
	mi := &file_api_project_v1_question_question_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQuestionListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionListResp) ProtoMessage() {}

func (x *GetQuestionListResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_project_v1_question_question_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionListResp.ProtoReflect.Descriptor instead.
func (*GetQuestionListResp) Descriptor() ([]byte, []int) {
	return file_api_project_v1_question_question_proto_rawDescGZIP(), []int{7}
}

func (x *GetQuestionListResp) GetCommonResp() *common.CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *GetQuestionListResp) GetQuestions() []*QuestionInfo {
	if x != nil {
		return x.Questions
	}
	return nil
}

func (x *GetQuestionListResp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 题目信息
type QuestionInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Question:
	//
	//	*QuestionInfo_Choice
	//	*QuestionInfo_Fill
	//	*QuestionInfo_Judge
	//	*QuestionInfo_Essay
	Question      isQuestionInfo_Question `protobuf_oneof:"question"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuestionInfo) Reset() {
	*x = QuestionInfo{}
	mi := &file_api_project_v1_question_question_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuestionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionInfo) ProtoMessage() {}

func (x *QuestionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_project_v1_question_question_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionInfo.ProtoReflect.Descriptor instead.
func (*QuestionInfo) Descriptor() ([]byte, []int) {
	return file_api_project_v1_question_question_proto_rawDescGZIP(), []int{8}
}

func (x *QuestionInfo) GetQuestion() isQuestionInfo_Question {
	if x != nil {
		return x.Question
	}
	return nil
}

func (x *QuestionInfo) GetChoice() *QuestionChoiceInfo {
	if x != nil {
		if x, ok := x.Question.(*QuestionInfo_Choice); ok {
			return x.Choice
		}
	}
	return nil
}

func (x *QuestionInfo) GetFill() *QuestionFillInfo {
	if x != nil {
		if x, ok := x.Question.(*QuestionInfo_Fill); ok {
			return x.Fill
		}
	}
	return nil
}

func (x *QuestionInfo) GetJudge() *QuestionJudgeInfo {
	if x != nil {
		if x, ok := x.Question.(*QuestionInfo_Judge); ok {
			return x.Judge
		}
	}
	return nil
}

func (x *QuestionInfo) GetEssay() *QuestionEssayInfo {
	if x != nil {
		if x, ok := x.Question.(*QuestionInfo_Essay); ok {
			return x.Essay
		}
	}
	return nil
}

type isQuestionInfo_Question interface {
	isQuestionInfo_Question()
}

type QuestionInfo_Choice struct {
	Choice *QuestionChoiceInfo `protobuf:"bytes,1,opt,name=choice,proto3,oneof"`
}

type QuestionInfo_Fill struct {
	Fill *QuestionFillInfo `protobuf:"bytes,2,opt,name=fill,proto3,oneof"`
}

type QuestionInfo_Judge struct {
	Judge *QuestionJudgeInfo `protobuf:"bytes,3,opt,name=judge,proto3,oneof"`
}

type QuestionInfo_Essay struct {
	Essay *QuestionEssayInfo `protobuf:"bytes,4,opt,name=essay,proto3,oneof"`
}

func (*QuestionInfo_Choice) isQuestionInfo_Question() {}

func (*QuestionInfo_Fill) isQuestionInfo_Question() {}

func (*QuestionInfo_Judge) isQuestionInfo_Question() {}

func (*QuestionInfo_Essay) isQuestionInfo_Question() {}

var File_api_project_v1_question_question_proto protoreflect.FileDescriptor

var file_api_project_v1_question_question_proto_rawDesc = string([]byte{
	0x0a, 0x26, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x76, 0x31,
	0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9b, 0x01, 0x0a, 0x10,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x22, 0xec, 0x01, 0x0a, 0x12, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x42, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0x7e, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x09,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0x7f, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x42, 0x0a,
	0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0x85, 0x01, 0x0a, 0x11, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x73, 0x73, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x42, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x22, 0x23, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x45, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xac, 0x01,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x9a, 0x02, 0x0a,
	0x0c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x12, 0x3b, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x3e, 0x0a,
	0x05, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x75, 0x64, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x12, 0x3e, 0x0a,
	0x05, 0x65, 0x73, 0x73, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x73, 0x73, 0x61, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x65, 0x73, 0x73, 0x61, 0x79, 0x42, 0x0a, 0x0a,
	0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0xeb, 0x0a, 0x0a, 0x08, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x89, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12,
	0x27, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a,
	0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x6c, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x2f, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x86, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x75, 0x64, 0x67, 0x65,
	0x12, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4a,
	0x75, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a,
	0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x6a, 0x75, 0x64, 0x67,
	0x65, 0x12, 0x86, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x73, 0x73, 0x61, 0x79, 0x12, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x73, 0x73, 0x61, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x73, 0x73, 0x61, 0x79, 0x12, 0x7d, 0x0a, 0x0e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x2a, 0x1c, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x8e, 0x01, 0x0a, 0x14, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x1d, 0x2e, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x28, 0x3a, 0x01, 0x2a, 0x1a, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x88, 0x01, 0x0a, 0x12, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c,
	0x6c, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a,
	0x01, 0x2a, 0x1a, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x66, 0x69, 0x6c, 0x6c,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x8b, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x12, 0x26, 0x2e,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x75, 0x64, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x1a,
	0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0x8b, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x73, 0x73, 0x61, 0x79, 0x12, 0x26, 0x2e, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x73, 0x73, 0x61, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x1a, 0x22, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x73, 0x73, 0x61, 0x79, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0x83, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x28,
	0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17,
	0x12, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x5e, 0x0a, 0x1a, 0x64, 0x65, 0x76, 0x2e, 0x6b,
	0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x42, 0x0f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x56, 0x31, 0x50, 0x01, 0x5a, 0x2d, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_api_project_v1_question_question_proto_rawDescOnce sync.Once
	file_api_project_v1_question_question_proto_rawDescData []byte
)

func file_api_project_v1_question_question_proto_rawDescGZIP() []byte {
	file_api_project_v1_question_question_proto_rawDescOnce.Do(func() {
		file_api_project_v1_question_question_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_project_v1_question_question_proto_rawDesc), len(file_api_project_v1_question_question_proto_rawDesc)))
	})
	return file_api_project_v1_question_question_proto_rawDescData
}

var file_api_project_v1_question_question_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_api_project_v1_question_question_proto_goTypes = []any{
	(*QuestionBaseInfo)(nil),    // 0: project.v1.question.QuestionBaseInfo
	(*QuestionChoiceInfo)(nil),  // 1: project.v1.question.QuestionChoiceInfo
	(*QuestionFillInfo)(nil),    // 2: project.v1.question.QuestionFillInfo
	(*QuestionJudgeInfo)(nil),   // 3: project.v1.question.QuestionJudgeInfo
	(*QuestionEssayInfo)(nil),   // 4: project.v1.question.QuestionEssayInfo
	(*DeleteQuestionReq)(nil),   // 5: project.v1.question.DeleteQuestionReq
	(*GetQuestionListReq)(nil),  // 6: project.v1.question.GetQuestionListReq
	(*GetQuestionListResp)(nil), // 7: project.v1.question.GetQuestionListResp
	(*QuestionInfo)(nil),        // 8: project.v1.question.QuestionInfo
	(*common.CommonResp)(nil),   // 9: project.v1.common.CommonResp
}
var file_api_project_v1_question_question_proto_depIdxs = []int32{
	0,  // 0: project.v1.question.QuestionChoiceInfo.base_info:type_name -> project.v1.question.QuestionBaseInfo
	0,  // 1: project.v1.question.QuestionFillInfo.base_info:type_name -> project.v1.question.QuestionBaseInfo
	0,  // 2: project.v1.question.QuestionJudgeInfo.base_info:type_name -> project.v1.question.QuestionBaseInfo
	0,  // 3: project.v1.question.QuestionEssayInfo.base_info:type_name -> project.v1.question.QuestionBaseInfo
	9,  // 4: project.v1.question.GetQuestionListResp.common_resp:type_name -> project.v1.common.CommonResp
	8,  // 5: project.v1.question.GetQuestionListResp.questions:type_name -> project.v1.question.QuestionInfo
	1,  // 6: project.v1.question.QuestionInfo.choice:type_name -> project.v1.question.QuestionChoiceInfo
	2,  // 7: project.v1.question.QuestionInfo.fill:type_name -> project.v1.question.QuestionFillInfo
	3,  // 8: project.v1.question.QuestionInfo.judge:type_name -> project.v1.question.QuestionJudgeInfo
	4,  // 9: project.v1.question.QuestionInfo.essay:type_name -> project.v1.question.QuestionEssayInfo
	1,  // 10: project.v1.question.Question.CreateQuestionChoice:input_type -> project.v1.question.QuestionChoiceInfo
	2,  // 11: project.v1.question.Question.CreateQuestionFill:input_type -> project.v1.question.QuestionFillInfo
	3,  // 12: project.v1.question.Question.CreateQuestionJudge:input_type -> project.v1.question.QuestionJudgeInfo
	4,  // 13: project.v1.question.Question.CreateQuestionEssay:input_type -> project.v1.question.QuestionEssayInfo
	5,  // 14: project.v1.question.Question.DeleteQuestion:input_type -> project.v1.question.DeleteQuestionReq
	1,  // 15: project.v1.question.Question.UpdateQuestionChoice:input_type -> project.v1.question.QuestionChoiceInfo
	2,  // 16: project.v1.question.Question.UpdateQuestionFill:input_type -> project.v1.question.QuestionFillInfo
	3,  // 17: project.v1.question.Question.UpdateQuestionJudge:input_type -> project.v1.question.QuestionJudgeInfo
	4,  // 18: project.v1.question.Question.UpdateQuestionEssay:input_type -> project.v1.question.QuestionEssayInfo
	6,  // 19: project.v1.question.Question.GetQuestionList:input_type -> project.v1.question.GetQuestionListReq
	9,  // 20: project.v1.question.Question.CreateQuestionChoice:output_type -> project.v1.common.CommonResp
	9,  // 21: project.v1.question.Question.CreateQuestionFill:output_type -> project.v1.common.CommonResp
	9,  // 22: project.v1.question.Question.CreateQuestionJudge:output_type -> project.v1.common.CommonResp
	9,  // 23: project.v1.question.Question.CreateQuestionEssay:output_type -> project.v1.common.CommonResp
	9,  // 24: project.v1.question.Question.DeleteQuestion:output_type -> project.v1.common.CommonResp
	9,  // 25: project.v1.question.Question.UpdateQuestionChoice:output_type -> project.v1.common.CommonResp
	9,  // 26: project.v1.question.Question.UpdateQuestionFill:output_type -> project.v1.common.CommonResp
	9,  // 27: project.v1.question.Question.UpdateQuestionJudge:output_type -> project.v1.common.CommonResp
	9,  // 28: project.v1.question.Question.UpdateQuestionEssay:output_type -> project.v1.common.CommonResp
	7,  // 29: project.v1.question.Question.GetQuestionList:output_type -> project.v1.question.GetQuestionListResp
	20, // [20:30] is the sub-list for method output_type
	10, // [10:20] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_api_project_v1_question_question_proto_init() }
func file_api_project_v1_question_question_proto_init() {
	if File_api_project_v1_question_question_proto != nil {
		return
	}
	file_api_project_v1_question_question_proto_msgTypes[8].OneofWrappers = []any{
		(*QuestionInfo_Choice)(nil),
		(*QuestionInfo_Fill)(nil),
		(*QuestionInfo_Judge)(nil),
		(*QuestionInfo_Essay)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_project_v1_question_question_proto_rawDesc), len(file_api_project_v1_question_question_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_project_v1_question_question_proto_goTypes,
		DependencyIndexes: file_api_project_v1_question_question_proto_depIdxs,
		MessageInfos:      file_api_project_v1_question_question_proto_msgTypes,
	}.Build()
	File_api_project_v1_question_question_proto = out.File
	file_api_project_v1_question_question_proto_goTypes = nil
	file_api_project_v1_question_question_proto_depIdxs = nil
}
