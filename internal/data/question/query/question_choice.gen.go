// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"helloworld/internal/data/question/model"
)

func newQuestionChoice(db *gorm.DB, opts ...gen.DOOption) questionChoice {
	_questionChoice := questionChoice{}

	_questionChoice.questionChoiceDo.UseDB(db, opts...)
	_questionChoice.questionChoiceDo.UseModel(&model.QuestionChoice{})

	tableName := _questionChoice.questionChoiceDo.TableName()
	_questionChoice.ALL = field.NewAsterisk(tableName)
	_questionChoice.ID = field.NewInt64(tableName, "id")
	_questionChoice.OptionA = field.NewString(tableName, "option_a")
	_questionChoice.OptionB = field.NewString(tableName, "option_b")
	_questionChoice.OptionC = field.NewString(tableName, "option_c")
	_questionChoice.OptionD = field.NewString(tableName, "option_d")
	_questionChoice.Answer = field.NewString(tableName, "answer")

	_questionChoice.fillFieldMap()

	return _questionChoice
}

type questionChoice struct {
	questionChoiceDo

	ALL     field.Asterisk
	ID      field.Int64
	OptionA field.String
	OptionB field.String
	OptionC field.String
	OptionD field.String
	Answer  field.String

	fieldMap map[string]field.Expr
}

func (q questionChoice) Table(newTableName string) *questionChoice {
	q.questionChoiceDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q questionChoice) As(alias string) *questionChoice {
	q.questionChoiceDo.DO = *(q.questionChoiceDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *questionChoice) updateTableName(table string) *questionChoice {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt64(table, "id")
	q.OptionA = field.NewString(table, "option_a")
	q.OptionB = field.NewString(table, "option_b")
	q.OptionC = field.NewString(table, "option_c")
	q.OptionD = field.NewString(table, "option_d")
	q.Answer = field.NewString(table, "answer")

	q.fillFieldMap()

	return q
}

func (q *questionChoice) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *questionChoice) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 6)
	q.fieldMap["id"] = q.ID
	q.fieldMap["option_a"] = q.OptionA
	q.fieldMap["option_b"] = q.OptionB
	q.fieldMap["option_c"] = q.OptionC
	q.fieldMap["option_d"] = q.OptionD
	q.fieldMap["answer"] = q.Answer
}

func (q questionChoice) clone(db *gorm.DB) questionChoice {
	q.questionChoiceDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q questionChoice) replaceDB(db *gorm.DB) questionChoice {
	q.questionChoiceDo.ReplaceDB(db)
	return q
}

type questionChoiceDo struct{ gen.DO }

type IQuestionChoiceDo interface {
	gen.SubQuery
	Debug() IQuestionChoiceDo
	WithContext(ctx context.Context) IQuestionChoiceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQuestionChoiceDo
	WriteDB() IQuestionChoiceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQuestionChoiceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQuestionChoiceDo
	Not(conds ...gen.Condition) IQuestionChoiceDo
	Or(conds ...gen.Condition) IQuestionChoiceDo
	Select(conds ...field.Expr) IQuestionChoiceDo
	Where(conds ...gen.Condition) IQuestionChoiceDo
	Order(conds ...field.Expr) IQuestionChoiceDo
	Distinct(cols ...field.Expr) IQuestionChoiceDo
	Omit(cols ...field.Expr) IQuestionChoiceDo
	Join(table schema.Tabler, on ...field.Expr) IQuestionChoiceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQuestionChoiceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQuestionChoiceDo
	Group(cols ...field.Expr) IQuestionChoiceDo
	Having(conds ...gen.Condition) IQuestionChoiceDo
	Limit(limit int) IQuestionChoiceDo
	Offset(offset int) IQuestionChoiceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQuestionChoiceDo
	Unscoped() IQuestionChoiceDo
	Create(values ...*model.QuestionChoice) error
	CreateInBatches(values []*model.QuestionChoice, batchSize int) error
	Save(values ...*model.QuestionChoice) error
	First() (*model.QuestionChoice, error)
	Take() (*model.QuestionChoice, error)
	Last() (*model.QuestionChoice, error)
	Find() ([]*model.QuestionChoice, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QuestionChoice, err error)
	FindInBatches(result *[]*model.QuestionChoice, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QuestionChoice) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQuestionChoiceDo
	Assign(attrs ...field.AssignExpr) IQuestionChoiceDo
	Joins(fields ...field.RelationField) IQuestionChoiceDo
	Preload(fields ...field.RelationField) IQuestionChoiceDo
	FirstOrInit() (*model.QuestionChoice, error)
	FirstOrCreate() (*model.QuestionChoice, error)
	FindByPage(offset int, limit int) (result []*model.QuestionChoice, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQuestionChoiceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q questionChoiceDo) Debug() IQuestionChoiceDo {
	return q.withDO(q.DO.Debug())
}

func (q questionChoiceDo) WithContext(ctx context.Context) IQuestionChoiceDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q questionChoiceDo) ReadDB() IQuestionChoiceDo {
	return q.Clauses(dbresolver.Read)
}

func (q questionChoiceDo) WriteDB() IQuestionChoiceDo {
	return q.Clauses(dbresolver.Write)
}

func (q questionChoiceDo) Session(config *gorm.Session) IQuestionChoiceDo {
	return q.withDO(q.DO.Session(config))
}

func (q questionChoiceDo) Clauses(conds ...clause.Expression) IQuestionChoiceDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q questionChoiceDo) Returning(value interface{}, columns ...string) IQuestionChoiceDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q questionChoiceDo) Not(conds ...gen.Condition) IQuestionChoiceDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q questionChoiceDo) Or(conds ...gen.Condition) IQuestionChoiceDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q questionChoiceDo) Select(conds ...field.Expr) IQuestionChoiceDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q questionChoiceDo) Where(conds ...gen.Condition) IQuestionChoiceDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q questionChoiceDo) Order(conds ...field.Expr) IQuestionChoiceDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q questionChoiceDo) Distinct(cols ...field.Expr) IQuestionChoiceDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q questionChoiceDo) Omit(cols ...field.Expr) IQuestionChoiceDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q questionChoiceDo) Join(table schema.Tabler, on ...field.Expr) IQuestionChoiceDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q questionChoiceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQuestionChoiceDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q questionChoiceDo) RightJoin(table schema.Tabler, on ...field.Expr) IQuestionChoiceDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q questionChoiceDo) Group(cols ...field.Expr) IQuestionChoiceDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q questionChoiceDo) Having(conds ...gen.Condition) IQuestionChoiceDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q questionChoiceDo) Limit(limit int) IQuestionChoiceDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q questionChoiceDo) Offset(offset int) IQuestionChoiceDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q questionChoiceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQuestionChoiceDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q questionChoiceDo) Unscoped() IQuestionChoiceDo {
	return q.withDO(q.DO.Unscoped())
}

func (q questionChoiceDo) Create(values ...*model.QuestionChoice) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q questionChoiceDo) CreateInBatches(values []*model.QuestionChoice, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q questionChoiceDo) Save(values ...*model.QuestionChoice) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q questionChoiceDo) First() (*model.QuestionChoice, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuestionChoice), nil
	}
}

func (q questionChoiceDo) Take() (*model.QuestionChoice, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuestionChoice), nil
	}
}

func (q questionChoiceDo) Last() (*model.QuestionChoice, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuestionChoice), nil
	}
}

func (q questionChoiceDo) Find() ([]*model.QuestionChoice, error) {
	result, err := q.DO.Find()
	return result.([]*model.QuestionChoice), err
}

func (q questionChoiceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QuestionChoice, err error) {
	buf := make([]*model.QuestionChoice, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q questionChoiceDo) FindInBatches(result *[]*model.QuestionChoice, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q questionChoiceDo) Attrs(attrs ...field.AssignExpr) IQuestionChoiceDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q questionChoiceDo) Assign(attrs ...field.AssignExpr) IQuestionChoiceDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q questionChoiceDo) Joins(fields ...field.RelationField) IQuestionChoiceDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q questionChoiceDo) Preload(fields ...field.RelationField) IQuestionChoiceDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q questionChoiceDo) FirstOrInit() (*model.QuestionChoice, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuestionChoice), nil
	}
}

func (q questionChoiceDo) FirstOrCreate() (*model.QuestionChoice, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuestionChoice), nil
	}
}

func (q questionChoiceDo) FindByPage(offset int, limit int) (result []*model.QuestionChoice, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q questionChoiceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q questionChoiceDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q questionChoiceDo) Delete(models ...*model.QuestionChoice) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *questionChoiceDo) withDO(do gen.Dao) *questionChoiceDo {
	q.DO = *do.(*gen.DO)
	return q
}
