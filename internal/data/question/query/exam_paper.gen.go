// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"helloworld/internal/data/question/model"
)

func newExamPaper(db *gorm.DB, opts ...gen.DOOption) examPaper {
	_examPaper := examPaper{}

	_examPaper.examPaperDo.UseDB(db, opts...)
	_examPaper.examPaperDo.UseModel(&model.ExamPaper{})

	tableName := _examPaper.examPaperDo.TableName()
	_examPaper.ALL = field.NewAsterisk(tableName)
	_examPaper.ID = field.NewInt64(tableName, "id")
	_examPaper.Title = field.NewString(tableName, "title")
	_examPaper.Questions = field.NewString(tableName, "questions")
	_examPaper.CreateTime = field.NewTime(tableName, "create_time")
	_examPaper.UpdatedAt = field.NewTime(tableName, "updated_at")
	_examPaper.DeletedAt = field.NewField(tableName, "deleted_at")

	_examPaper.fillFieldMap()

	return _examPaper
}

type examPaper struct {
	examPaperDo

	ALL        field.Asterisk
	ID         field.Int64
	Title      field.String // 试卷标题
	Questions  field.String // 题目列表（格式：[{"type":"choice","id":1}, ...]）
	CreateTime field.Time
	UpdatedAt  field.Time
	DeletedAt  field.Field

	fieldMap map[string]field.Expr
}

func (e examPaper) Table(newTableName string) *examPaper {
	e.examPaperDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e examPaper) As(alias string) *examPaper {
	e.examPaperDo.DO = *(e.examPaperDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *examPaper) updateTableName(table string) *examPaper {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.Title = field.NewString(table, "title")
	e.Questions = field.NewString(table, "questions")
	e.CreateTime = field.NewTime(table, "create_time")
	e.UpdatedAt = field.NewTime(table, "updated_at")
	e.DeletedAt = field.NewField(table, "deleted_at")

	e.fillFieldMap()

	return e
}

func (e *examPaper) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *examPaper) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 6)
	e.fieldMap["id"] = e.ID
	e.fieldMap["title"] = e.Title
	e.fieldMap["questions"] = e.Questions
	e.fieldMap["create_time"] = e.CreateTime
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["deleted_at"] = e.DeletedAt
}

func (e examPaper) clone(db *gorm.DB) examPaper {
	e.examPaperDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e examPaper) replaceDB(db *gorm.DB) examPaper {
	e.examPaperDo.ReplaceDB(db)
	return e
}

type examPaperDo struct{ gen.DO }

type IExamPaperDo interface {
	gen.SubQuery
	Debug() IExamPaperDo
	WithContext(ctx context.Context) IExamPaperDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IExamPaperDo
	WriteDB() IExamPaperDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IExamPaperDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IExamPaperDo
	Not(conds ...gen.Condition) IExamPaperDo
	Or(conds ...gen.Condition) IExamPaperDo
	Select(conds ...field.Expr) IExamPaperDo
	Where(conds ...gen.Condition) IExamPaperDo
	Order(conds ...field.Expr) IExamPaperDo
	Distinct(cols ...field.Expr) IExamPaperDo
	Omit(cols ...field.Expr) IExamPaperDo
	Join(table schema.Tabler, on ...field.Expr) IExamPaperDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IExamPaperDo
	RightJoin(table schema.Tabler, on ...field.Expr) IExamPaperDo
	Group(cols ...field.Expr) IExamPaperDo
	Having(conds ...gen.Condition) IExamPaperDo
	Limit(limit int) IExamPaperDo
	Offset(offset int) IExamPaperDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IExamPaperDo
	Unscoped() IExamPaperDo
	Create(values ...*model.ExamPaper) error
	CreateInBatches(values []*model.ExamPaper, batchSize int) error
	Save(values ...*model.ExamPaper) error
	First() (*model.ExamPaper, error)
	Take() (*model.ExamPaper, error)
	Last() (*model.ExamPaper, error)
	Find() ([]*model.ExamPaper, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ExamPaper, err error)
	FindInBatches(result *[]*model.ExamPaper, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ExamPaper) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IExamPaperDo
	Assign(attrs ...field.AssignExpr) IExamPaperDo
	Joins(fields ...field.RelationField) IExamPaperDo
	Preload(fields ...field.RelationField) IExamPaperDo
	FirstOrInit() (*model.ExamPaper, error)
	FirstOrCreate() (*model.ExamPaper, error)
	FindByPage(offset int, limit int) (result []*model.ExamPaper, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IExamPaperDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e examPaperDo) Debug() IExamPaperDo {
	return e.withDO(e.DO.Debug())
}

func (e examPaperDo) WithContext(ctx context.Context) IExamPaperDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e examPaperDo) ReadDB() IExamPaperDo {
	return e.Clauses(dbresolver.Read)
}

func (e examPaperDo) WriteDB() IExamPaperDo {
	return e.Clauses(dbresolver.Write)
}

func (e examPaperDo) Session(config *gorm.Session) IExamPaperDo {
	return e.withDO(e.DO.Session(config))
}

func (e examPaperDo) Clauses(conds ...clause.Expression) IExamPaperDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e examPaperDo) Returning(value interface{}, columns ...string) IExamPaperDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e examPaperDo) Not(conds ...gen.Condition) IExamPaperDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e examPaperDo) Or(conds ...gen.Condition) IExamPaperDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e examPaperDo) Select(conds ...field.Expr) IExamPaperDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e examPaperDo) Where(conds ...gen.Condition) IExamPaperDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e examPaperDo) Order(conds ...field.Expr) IExamPaperDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e examPaperDo) Distinct(cols ...field.Expr) IExamPaperDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e examPaperDo) Omit(cols ...field.Expr) IExamPaperDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e examPaperDo) Join(table schema.Tabler, on ...field.Expr) IExamPaperDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e examPaperDo) LeftJoin(table schema.Tabler, on ...field.Expr) IExamPaperDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e examPaperDo) RightJoin(table schema.Tabler, on ...field.Expr) IExamPaperDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e examPaperDo) Group(cols ...field.Expr) IExamPaperDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e examPaperDo) Having(conds ...gen.Condition) IExamPaperDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e examPaperDo) Limit(limit int) IExamPaperDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e examPaperDo) Offset(offset int) IExamPaperDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e examPaperDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IExamPaperDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e examPaperDo) Unscoped() IExamPaperDo {
	return e.withDO(e.DO.Unscoped())
}

func (e examPaperDo) Create(values ...*model.ExamPaper) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e examPaperDo) CreateInBatches(values []*model.ExamPaper, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e examPaperDo) Save(values ...*model.ExamPaper) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e examPaperDo) First() (*model.ExamPaper, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExamPaper), nil
	}
}

func (e examPaperDo) Take() (*model.ExamPaper, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExamPaper), nil
	}
}

func (e examPaperDo) Last() (*model.ExamPaper, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExamPaper), nil
	}
}

func (e examPaperDo) Find() ([]*model.ExamPaper, error) {
	result, err := e.DO.Find()
	return result.([]*model.ExamPaper), err
}

func (e examPaperDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ExamPaper, err error) {
	buf := make([]*model.ExamPaper, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e examPaperDo) FindInBatches(result *[]*model.ExamPaper, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e examPaperDo) Attrs(attrs ...field.AssignExpr) IExamPaperDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e examPaperDo) Assign(attrs ...field.AssignExpr) IExamPaperDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e examPaperDo) Joins(fields ...field.RelationField) IExamPaperDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e examPaperDo) Preload(fields ...field.RelationField) IExamPaperDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e examPaperDo) FirstOrInit() (*model.ExamPaper, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExamPaper), nil
	}
}

func (e examPaperDo) FirstOrCreate() (*model.ExamPaper, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExamPaper), nil
	}
}

func (e examPaperDo) FindByPage(offset int, limit int) (result []*model.ExamPaper, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e examPaperDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e examPaperDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e examPaperDo) Delete(models ...*model.ExamPaper) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *examPaperDo) withDO(do gen.Dao) *examPaperDo {
	e.DO = *do.(*gen.DO)
	return e
}
