// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.26.1
// source: api/project/v1/question/question.proto

package questionv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	common "helloworld/api/project/v1/common"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationQuestionCreateQuestionChoice = "/project.v1.question.Question/CreateQuestionChoice"
const OperationQuestionCreateQuestionEssay = "/project.v1.question.Question/CreateQuestionEssay"
const OperationQuestionCreateQuestionFill = "/project.v1.question.Question/CreateQuestionFill"
const OperationQuestionCreateQuestionJudge = "/project.v1.question.Question/CreateQuestionJudge"
const OperationQuestionDeleteQuestion = "/project.v1.question.Question/DeleteQuestion"
const OperationQuestionGetQuestionList = "/project.v1.question.Question/GetQuestionList"
const OperationQuestionUpdateQuestionChoice = "/project.v1.question.Question/UpdateQuestionChoice"
const OperationQuestionUpdateQuestionEssay = "/project.v1.question.Question/UpdateQuestionEssay"
const OperationQuestionUpdateQuestionFill = "/project.v1.question.Question/UpdateQuestionFill"
const OperationQuestionUpdateQuestionJudge = "/project.v1.question.Question/UpdateQuestionJudge"

type QuestionHTTPServer interface {
	// CreateQuestionChoice 创建选择题
	CreateQuestionChoice(context.Context, *QuestionChoiceInfo) (*common.CommonResp, error)
	// CreateQuestionEssay 创建简答题/大题
	CreateQuestionEssay(context.Context, *QuestionEssayInfo) (*common.CommonResp, error)
	// CreateQuestionFill 创建填空题
	CreateQuestionFill(context.Context, *QuestionFillInfo) (*common.CommonResp, error)
	// CreateQuestionJudge 创建判断题
	CreateQuestionJudge(context.Context, *QuestionJudgeInfo) (*common.CommonResp, error)
	// DeleteQuestion 删除题目
	DeleteQuestion(context.Context, *DeleteQuestionReq) (*common.CommonResp, error)
	// GetQuestionList 获取题目列表
	GetQuestionList(context.Context, *GetQuestionListReq) (*GetQuestionListResp, error)
	// UpdateQuestionChoice 更新选择题
	UpdateQuestionChoice(context.Context, *QuestionChoiceInfo) (*common.CommonResp, error)
	// UpdateQuestionEssay 更新简答题/大题
	UpdateQuestionEssay(context.Context, *QuestionEssayInfo) (*common.CommonResp, error)
	// UpdateQuestionFill 更新填空题
	UpdateQuestionFill(context.Context, *QuestionFillInfo) (*common.CommonResp, error)
	// UpdateQuestionJudge 更新判断题
	UpdateQuestionJudge(context.Context, *QuestionJudgeInfo) (*common.CommonResp, error)
}

func RegisterQuestionHTTPServer(s *http.Server, srv QuestionHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/question/create/choice", _Question_CreateQuestionChoice0_HTTP_Handler(srv))
	r.POST("/api/v1/question/create/fill", _Question_CreateQuestionFill0_HTTP_Handler(srv))
	r.POST("/api/v1/question/create/judge", _Question_CreateQuestionJudge0_HTTP_Handler(srv))
	r.POST("/api/v1/question/create/essay", _Question_CreateQuestionEssay0_HTTP_Handler(srv))
	r.DELETE("/api/v1/question/delete/{id}", _Question_DeleteQuestion0_HTTP_Handler(srv))
	r.PUT("/api/v1/question/update/choice/{id}", _Question_UpdateQuestionChoice0_HTTP_Handler(srv))
	r.PUT("/api/v1/question/update/fill/{id}", _Question_UpdateQuestionFill0_HTTP_Handler(srv))
	r.PUT("/api/v1/question/update/judge/{id}", _Question_UpdateQuestionJudge0_HTTP_Handler(srv))
	r.PUT("/api/v1/question/update/essay/{id}", _Question_UpdateQuestionEssay0_HTTP_Handler(srv))
	r.GET("/api/v1/question/list", _Question_GetQuestionList0_HTTP_Handler(srv))
}

func _Question_CreateQuestionChoice0_HTTP_Handler(srv QuestionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QuestionChoiceInfo
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuestionCreateQuestionChoice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateQuestionChoice(ctx, req.(*QuestionChoiceInfo))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.CommonResp)
		return ctx.Result(200, reply)
	}
}

func _Question_CreateQuestionFill0_HTTP_Handler(srv QuestionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QuestionFillInfo
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuestionCreateQuestionFill)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateQuestionFill(ctx, req.(*QuestionFillInfo))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.CommonResp)
		return ctx.Result(200, reply)
	}
}

func _Question_CreateQuestionJudge0_HTTP_Handler(srv QuestionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QuestionJudgeInfo
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuestionCreateQuestionJudge)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateQuestionJudge(ctx, req.(*QuestionJudgeInfo))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.CommonResp)
		return ctx.Result(200, reply)
	}
}

func _Question_CreateQuestionEssay0_HTTP_Handler(srv QuestionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QuestionEssayInfo
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuestionCreateQuestionEssay)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateQuestionEssay(ctx, req.(*QuestionEssayInfo))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.CommonResp)
		return ctx.Result(200, reply)
	}
}

func _Question_DeleteQuestion0_HTTP_Handler(srv QuestionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteQuestionReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuestionDeleteQuestion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteQuestion(ctx, req.(*DeleteQuestionReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.CommonResp)
		return ctx.Result(200, reply)
	}
}

func _Question_UpdateQuestionChoice0_HTTP_Handler(srv QuestionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QuestionChoiceInfo
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuestionUpdateQuestionChoice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateQuestionChoice(ctx, req.(*QuestionChoiceInfo))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.CommonResp)
		return ctx.Result(200, reply)
	}
}

func _Question_UpdateQuestionFill0_HTTP_Handler(srv QuestionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QuestionFillInfo
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuestionUpdateQuestionFill)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateQuestionFill(ctx, req.(*QuestionFillInfo))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.CommonResp)
		return ctx.Result(200, reply)
	}
}

func _Question_UpdateQuestionJudge0_HTTP_Handler(srv QuestionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QuestionJudgeInfo
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuestionUpdateQuestionJudge)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateQuestionJudge(ctx, req.(*QuestionJudgeInfo))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.CommonResp)
		return ctx.Result(200, reply)
	}
}

func _Question_UpdateQuestionEssay0_HTTP_Handler(srv QuestionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QuestionEssayInfo
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuestionUpdateQuestionEssay)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateQuestionEssay(ctx, req.(*QuestionEssayInfo))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.CommonResp)
		return ctx.Result(200, reply)
	}
}

func _Question_GetQuestionList0_HTTP_Handler(srv QuestionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetQuestionListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuestionGetQuestionList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetQuestionList(ctx, req.(*GetQuestionListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetQuestionListResp)
		return ctx.Result(200, reply)
	}
}

type QuestionHTTPClient interface {
	CreateQuestionChoice(ctx context.Context, req *QuestionChoiceInfo, opts ...http.CallOption) (rsp *common.CommonResp, err error)
	CreateQuestionEssay(ctx context.Context, req *QuestionEssayInfo, opts ...http.CallOption) (rsp *common.CommonResp, err error)
	CreateQuestionFill(ctx context.Context, req *QuestionFillInfo, opts ...http.CallOption) (rsp *common.CommonResp, err error)
	CreateQuestionJudge(ctx context.Context, req *QuestionJudgeInfo, opts ...http.CallOption) (rsp *common.CommonResp, err error)
	DeleteQuestion(ctx context.Context, req *DeleteQuestionReq, opts ...http.CallOption) (rsp *common.CommonResp, err error)
	GetQuestionList(ctx context.Context, req *GetQuestionListReq, opts ...http.CallOption) (rsp *GetQuestionListResp, err error)
	UpdateQuestionChoice(ctx context.Context, req *QuestionChoiceInfo, opts ...http.CallOption) (rsp *common.CommonResp, err error)
	UpdateQuestionEssay(ctx context.Context, req *QuestionEssayInfo, opts ...http.CallOption) (rsp *common.CommonResp, err error)
	UpdateQuestionFill(ctx context.Context, req *QuestionFillInfo, opts ...http.CallOption) (rsp *common.CommonResp, err error)
	UpdateQuestionJudge(ctx context.Context, req *QuestionJudgeInfo, opts ...http.CallOption) (rsp *common.CommonResp, err error)
}

type QuestionHTTPClientImpl struct {
	cc *http.Client
}

func NewQuestionHTTPClient(client *http.Client) QuestionHTTPClient {
	return &QuestionHTTPClientImpl{client}
}

func (c *QuestionHTTPClientImpl) CreateQuestionChoice(ctx context.Context, in *QuestionChoiceInfo, opts ...http.CallOption) (*common.CommonResp, error) {
	var out common.CommonResp
	pattern := "/api/v1/question/create/choice"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQuestionCreateQuestionChoice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuestionHTTPClientImpl) CreateQuestionEssay(ctx context.Context, in *QuestionEssayInfo, opts ...http.CallOption) (*common.CommonResp, error) {
	var out common.CommonResp
	pattern := "/api/v1/question/create/essay"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQuestionCreateQuestionEssay))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuestionHTTPClientImpl) CreateQuestionFill(ctx context.Context, in *QuestionFillInfo, opts ...http.CallOption) (*common.CommonResp, error) {
	var out common.CommonResp
	pattern := "/api/v1/question/create/fill"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQuestionCreateQuestionFill))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuestionHTTPClientImpl) CreateQuestionJudge(ctx context.Context, in *QuestionJudgeInfo, opts ...http.CallOption) (*common.CommonResp, error) {
	var out common.CommonResp
	pattern := "/api/v1/question/create/judge"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQuestionCreateQuestionJudge))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuestionHTTPClientImpl) DeleteQuestion(ctx context.Context, in *DeleteQuestionReq, opts ...http.CallOption) (*common.CommonResp, error) {
	var out common.CommonResp
	pattern := "/api/v1/question/delete/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQuestionDeleteQuestion))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuestionHTTPClientImpl) GetQuestionList(ctx context.Context, in *GetQuestionListReq, opts ...http.CallOption) (*GetQuestionListResp, error) {
	var out GetQuestionListResp
	pattern := "/api/v1/question/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQuestionGetQuestionList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuestionHTTPClientImpl) UpdateQuestionChoice(ctx context.Context, in *QuestionChoiceInfo, opts ...http.CallOption) (*common.CommonResp, error) {
	var out common.CommonResp
	pattern := "/api/v1/question/update/choice/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQuestionUpdateQuestionChoice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuestionHTTPClientImpl) UpdateQuestionEssay(ctx context.Context, in *QuestionEssayInfo, opts ...http.CallOption) (*common.CommonResp, error) {
	var out common.CommonResp
	pattern := "/api/v1/question/update/essay/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQuestionUpdateQuestionEssay))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuestionHTTPClientImpl) UpdateQuestionFill(ctx context.Context, in *QuestionFillInfo, opts ...http.CallOption) (*common.CommonResp, error) {
	var out common.CommonResp
	pattern := "/api/v1/question/update/fill/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQuestionUpdateQuestionFill))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuestionHTTPClientImpl) UpdateQuestionJudge(ctx context.Context, in *QuestionJudgeInfo, opts ...http.CallOption) (*common.CommonResp, error) {
	var out common.CommonResp
	pattern := "/api/v1/question/update/judge/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQuestionUpdateQuestionJudge))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
