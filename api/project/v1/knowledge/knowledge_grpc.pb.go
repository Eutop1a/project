// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: api/project/v1/knowledge/knowledge.proto

package knowledgev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	common "helloworld/api/project/v1/common"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Knowledge_CreateKnowledge_FullMethodName = "/project.v1.knowledge.Knowledge/CreateKnowledge"
	Knowledge_UpdateKnowledge_FullMethodName = "/project.v1.knowledge.Knowledge/UpdateKnowledge"
	Knowledge_DeleteKnowledge_FullMethodName = "/project.v1.knowledge.Knowledge/DeleteKnowledge"
	Knowledge_GetKnowledge_FullMethodName    = "/project.v1.knowledge.Knowledge/GetKnowledge"
	Knowledge_ListKnowledge_FullMethodName   = "/project.v1.knowledge.Knowledge/ListKnowledge"
)

// KnowledgeClient is the client API for Knowledge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KnowledgeClient interface {
	CreateKnowledge(ctx context.Context, in *CreateKnowledgeReq, opts ...grpc.CallOption) (*common.CommonResp, error)
	UpdateKnowledge(ctx context.Context, in *UpdateKnowledgeReq, opts ...grpc.CallOption) (*common.CommonResp, error)
	DeleteKnowledge(ctx context.Context, in *DeleteKnowledgeReq, opts ...grpc.CallOption) (*common.CommonResp, error)
	GetKnowledge(ctx context.Context, in *GetKnowledgeReq, opts ...grpc.CallOption) (*GetKnowledgeResp, error)
	ListKnowledge(ctx context.Context, in *ListKnowledgeReq, opts ...grpc.CallOption) (*ListKnowledgeResp, error)
}

type knowledgeClient struct {
	cc grpc.ClientConnInterface
}

func NewKnowledgeClient(cc grpc.ClientConnInterface) KnowledgeClient {
	return &knowledgeClient{cc}
}

func (c *knowledgeClient) CreateKnowledge(ctx context.Context, in *CreateKnowledgeReq, opts ...grpc.CallOption) (*common.CommonResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.CommonResp)
	err := c.cc.Invoke(ctx, Knowledge_CreateKnowledge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeClient) UpdateKnowledge(ctx context.Context, in *UpdateKnowledgeReq, opts ...grpc.CallOption) (*common.CommonResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.CommonResp)
	err := c.cc.Invoke(ctx, Knowledge_UpdateKnowledge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeClient) DeleteKnowledge(ctx context.Context, in *DeleteKnowledgeReq, opts ...grpc.CallOption) (*common.CommonResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.CommonResp)
	err := c.cc.Invoke(ctx, Knowledge_DeleteKnowledge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeClient) GetKnowledge(ctx context.Context, in *GetKnowledgeReq, opts ...grpc.CallOption) (*GetKnowledgeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKnowledgeResp)
	err := c.cc.Invoke(ctx, Knowledge_GetKnowledge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeClient) ListKnowledge(ctx context.Context, in *ListKnowledgeReq, opts ...grpc.CallOption) (*ListKnowledgeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListKnowledgeResp)
	err := c.cc.Invoke(ctx, Knowledge_ListKnowledge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KnowledgeServer is the server API for Knowledge service.
// All implementations must embed UnimplementedKnowledgeServer
// for forward compatibility.
type KnowledgeServer interface {
	CreateKnowledge(context.Context, *CreateKnowledgeReq) (*common.CommonResp, error)
	UpdateKnowledge(context.Context, *UpdateKnowledgeReq) (*common.CommonResp, error)
	DeleteKnowledge(context.Context, *DeleteKnowledgeReq) (*common.CommonResp, error)
	GetKnowledge(context.Context, *GetKnowledgeReq) (*GetKnowledgeResp, error)
	ListKnowledge(context.Context, *ListKnowledgeReq) (*ListKnowledgeResp, error)
	mustEmbedUnimplementedKnowledgeServer()
}

// UnimplementedKnowledgeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKnowledgeServer struct{}

func (UnimplementedKnowledgeServer) CreateKnowledge(context.Context, *CreateKnowledgeReq) (*common.CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKnowledge not implemented")
}
func (UnimplementedKnowledgeServer) UpdateKnowledge(context.Context, *UpdateKnowledgeReq) (*common.CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKnowledge not implemented")
}
func (UnimplementedKnowledgeServer) DeleteKnowledge(context.Context, *DeleteKnowledgeReq) (*common.CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKnowledge not implemented")
}
func (UnimplementedKnowledgeServer) GetKnowledge(context.Context, *GetKnowledgeReq) (*GetKnowledgeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKnowledge not implemented")
}
func (UnimplementedKnowledgeServer) ListKnowledge(context.Context, *ListKnowledgeReq) (*ListKnowledgeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKnowledge not implemented")
}
func (UnimplementedKnowledgeServer) mustEmbedUnimplementedKnowledgeServer() {}
func (UnimplementedKnowledgeServer) testEmbeddedByValue()                   {}

// UnsafeKnowledgeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KnowledgeServer will
// result in compilation errors.
type UnsafeKnowledgeServer interface {
	mustEmbedUnimplementedKnowledgeServer()
}

func RegisterKnowledgeServer(s grpc.ServiceRegistrar, srv KnowledgeServer) {
	// If the following call pancis, it indicates UnimplementedKnowledgeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Knowledge_ServiceDesc, srv)
}

func _Knowledge_CreateKnowledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKnowledgeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).CreateKnowledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Knowledge_CreateKnowledge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).CreateKnowledge(ctx, req.(*CreateKnowledgeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Knowledge_UpdateKnowledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKnowledgeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).UpdateKnowledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Knowledge_UpdateKnowledge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).UpdateKnowledge(ctx, req.(*UpdateKnowledgeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Knowledge_DeleteKnowledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKnowledgeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).DeleteKnowledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Knowledge_DeleteKnowledge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).DeleteKnowledge(ctx, req.(*DeleteKnowledgeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Knowledge_GetKnowledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKnowledgeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).GetKnowledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Knowledge_GetKnowledge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).GetKnowledge(ctx, req.(*GetKnowledgeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Knowledge_ListKnowledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKnowledgeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).ListKnowledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Knowledge_ListKnowledge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).ListKnowledge(ctx, req.(*ListKnowledgeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Knowledge_ServiceDesc is the grpc.ServiceDesc for Knowledge service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Knowledge_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "project.v1.knowledge.Knowledge",
	HandlerType: (*KnowledgeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateKnowledge",
			Handler:    _Knowledge_CreateKnowledge_Handler,
		},
		{
			MethodName: "UpdateKnowledge",
			Handler:    _Knowledge_UpdateKnowledge_Handler,
		},
		{
			MethodName: "DeleteKnowledge",
			Handler:    _Knowledge_DeleteKnowledge_Handler,
		},
		{
			MethodName: "GetKnowledge",
			Handler:    _Knowledge_GetKnowledge_Handler,
		},
		{
			MethodName: "ListKnowledge",
			Handler:    _Knowledge_ListKnowledge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/project/v1/knowledge/knowledge.proto",
}
