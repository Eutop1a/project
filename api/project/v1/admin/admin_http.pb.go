// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.26.1
// source: api/project/v1/admin/admin.proto

package adminv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	common "helloworld/api/project/v1/common"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAdminAddAdmin = "/project.v1.admin.Admin/AddAdmin"
const OperationAdminBatchRemoveAdmin = "/project.v1.admin.Admin/BatchRemoveAdmin"
const OperationAdminDeleteUser = "/project.v1.admin.Admin/DeleteUser"
const OperationAdminGetUserList = "/project.v1.admin.Admin/GetUserList"
const OperationAdminRemoveAdmin = "/project.v1.admin.Admin/RemoveAdmin"

type AdminHTTPServer interface {
	// AddAdmin 管理员管理
	AddAdmin(context.Context, *AddAdminReq) (*common.CommonResp, error)
	// BatchRemoveAdmin 批量撤销管理员
	BatchRemoveAdmin(context.Context, *BatchRemoveAdminReq) (*common.CommonResp, error)
	DeleteUser(context.Context, *DeleteUserReq) (*common.CommonResp, error)
	// GetUserList 用户管理
	GetUserList(context.Context, *GetUserListReq) (*GetUserListResp, error)
	// RemoveAdmin 撤销单个管理员
	RemoveAdmin(context.Context, *RemoveAdminReq) (*common.CommonResp, error)
}

func RegisterAdminHTTPServer(s *http.Server, srv AdminHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/admin/users", _Admin_GetUserList0_HTTP_Handler(srv))
	r.DELETE("/api/v1/admin/user/{user_id}", _Admin_DeleteUser0_HTTP_Handler(srv))
	r.POST("/api/v1/admin/add-admin", _Admin_AddAdmin0_HTTP_Handler(srv))
	r.POST("/api/v1/admin/remove-admin", _Admin_RemoveAdmin0_HTTP_Handler(srv))
	r.POST("/api/v1/admin/batch-remove-admin", _Admin_BatchRemoveAdmin0_HTTP_Handler(srv))
}

func _Admin_GetUserList0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminGetUserList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserList(ctx, req.(*GetUserListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserListResp)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteUser0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminDeleteUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteUser(ctx, req.(*DeleteUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.CommonResp)
		return ctx.Result(200, reply)
	}
}

func _Admin_AddAdmin0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddAdminReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminAddAdmin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddAdmin(ctx, req.(*AddAdminReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.CommonResp)
		return ctx.Result(200, reply)
	}
}

func _Admin_RemoveAdmin0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RemoveAdminReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminRemoveAdmin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RemoveAdmin(ctx, req.(*RemoveAdminReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.CommonResp)
		return ctx.Result(200, reply)
	}
}

func _Admin_BatchRemoveAdmin0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BatchRemoveAdminReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminBatchRemoveAdmin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchRemoveAdmin(ctx, req.(*BatchRemoveAdminReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.CommonResp)
		return ctx.Result(200, reply)
	}
}

type AdminHTTPClient interface {
	AddAdmin(ctx context.Context, req *AddAdminReq, opts ...http.CallOption) (rsp *common.CommonResp, err error)
	BatchRemoveAdmin(ctx context.Context, req *BatchRemoveAdminReq, opts ...http.CallOption) (rsp *common.CommonResp, err error)
	DeleteUser(ctx context.Context, req *DeleteUserReq, opts ...http.CallOption) (rsp *common.CommonResp, err error)
	GetUserList(ctx context.Context, req *GetUserListReq, opts ...http.CallOption) (rsp *GetUserListResp, err error)
	RemoveAdmin(ctx context.Context, req *RemoveAdminReq, opts ...http.CallOption) (rsp *common.CommonResp, err error)
}

type AdminHTTPClientImpl struct {
	cc *http.Client
}

func NewAdminHTTPClient(client *http.Client) AdminHTTPClient {
	return &AdminHTTPClientImpl{client}
}

func (c *AdminHTTPClientImpl) AddAdmin(ctx context.Context, in *AddAdminReq, opts ...http.CallOption) (*common.CommonResp, error) {
	var out common.CommonResp
	pattern := "/api/v1/admin/add-admin"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminAddAdmin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) BatchRemoveAdmin(ctx context.Context, in *BatchRemoveAdminReq, opts ...http.CallOption) (*common.CommonResp, error) {
	var out common.CommonResp
	pattern := "/api/v1/admin/batch-remove-admin"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminBatchRemoveAdmin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...http.CallOption) (*common.CommonResp, error) {
	var out common.CommonResp
	pattern := "/api/v1/admin/user/{user_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminDeleteUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) GetUserList(ctx context.Context, in *GetUserListReq, opts ...http.CallOption) (*GetUserListResp, error) {
	var out GetUserListResp
	pattern := "/api/v1/admin/users"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminGetUserList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) RemoveAdmin(ctx context.Context, in *RemoveAdminReq, opts ...http.CallOption) (*common.CommonResp, error) {
	var out common.CommonResp
	pattern := "/api/v1/admin/remove-admin"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminRemoveAdmin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
