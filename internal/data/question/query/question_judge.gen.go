// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"helloworld/internal/data/question/model"
)

func newQuestionJudge(db *gorm.DB, opts ...gen.DOOption) questionJudge {
	_questionJudge := questionJudge{}

	_questionJudge.questionJudgeDo.UseDB(db, opts...)
	_questionJudge.questionJudgeDo.UseModel(&model.QuestionJudge{})

	tableName := _questionJudge.questionJudgeDo.TableName()
	_questionJudge.ALL = field.NewAsterisk(tableName)
	_questionJudge.ID = field.NewInt64(tableName, "id")
	_questionJudge.Answer = field.NewInt64(tableName, "answer")

	_questionJudge.fillFieldMap()

	return _questionJudge
}

type questionJudge struct {
	questionJudgeDo

	ALL    field.Asterisk
	ID     field.Int64
	Answer field.Int64 // TRUE/FALSE

	fieldMap map[string]field.Expr
}

func (q questionJudge) Table(newTableName string) *questionJudge {
	q.questionJudgeDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q questionJudge) As(alias string) *questionJudge {
	q.questionJudgeDo.DO = *(q.questionJudgeDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *questionJudge) updateTableName(table string) *questionJudge {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt64(table, "id")
	q.Answer = field.NewInt64(table, "answer")

	q.fillFieldMap()

	return q
}

func (q *questionJudge) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *questionJudge) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 2)
	q.fieldMap["id"] = q.ID
	q.fieldMap["answer"] = q.Answer
}

func (q questionJudge) clone(db *gorm.DB) questionJudge {
	q.questionJudgeDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q questionJudge) replaceDB(db *gorm.DB) questionJudge {
	q.questionJudgeDo.ReplaceDB(db)
	return q
}

type questionJudgeDo struct{ gen.DO }

type IQuestionJudgeDo interface {
	gen.SubQuery
	Debug() IQuestionJudgeDo
	WithContext(ctx context.Context) IQuestionJudgeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQuestionJudgeDo
	WriteDB() IQuestionJudgeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQuestionJudgeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQuestionJudgeDo
	Not(conds ...gen.Condition) IQuestionJudgeDo
	Or(conds ...gen.Condition) IQuestionJudgeDo
	Select(conds ...field.Expr) IQuestionJudgeDo
	Where(conds ...gen.Condition) IQuestionJudgeDo
	Order(conds ...field.Expr) IQuestionJudgeDo
	Distinct(cols ...field.Expr) IQuestionJudgeDo
	Omit(cols ...field.Expr) IQuestionJudgeDo
	Join(table schema.Tabler, on ...field.Expr) IQuestionJudgeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQuestionJudgeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQuestionJudgeDo
	Group(cols ...field.Expr) IQuestionJudgeDo
	Having(conds ...gen.Condition) IQuestionJudgeDo
	Limit(limit int) IQuestionJudgeDo
	Offset(offset int) IQuestionJudgeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQuestionJudgeDo
	Unscoped() IQuestionJudgeDo
	Create(values ...*model.QuestionJudge) error
	CreateInBatches(values []*model.QuestionJudge, batchSize int) error
	Save(values ...*model.QuestionJudge) error
	First() (*model.QuestionJudge, error)
	Take() (*model.QuestionJudge, error)
	Last() (*model.QuestionJudge, error)
	Find() ([]*model.QuestionJudge, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QuestionJudge, err error)
	FindInBatches(result *[]*model.QuestionJudge, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QuestionJudge) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQuestionJudgeDo
	Assign(attrs ...field.AssignExpr) IQuestionJudgeDo
	Joins(fields ...field.RelationField) IQuestionJudgeDo
	Preload(fields ...field.RelationField) IQuestionJudgeDo
	FirstOrInit() (*model.QuestionJudge, error)
	FirstOrCreate() (*model.QuestionJudge, error)
	FindByPage(offset int, limit int) (result []*model.QuestionJudge, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQuestionJudgeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q questionJudgeDo) Debug() IQuestionJudgeDo {
	return q.withDO(q.DO.Debug())
}

func (q questionJudgeDo) WithContext(ctx context.Context) IQuestionJudgeDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q questionJudgeDo) ReadDB() IQuestionJudgeDo {
	return q.Clauses(dbresolver.Read)
}

func (q questionJudgeDo) WriteDB() IQuestionJudgeDo {
	return q.Clauses(dbresolver.Write)
}

func (q questionJudgeDo) Session(config *gorm.Session) IQuestionJudgeDo {
	return q.withDO(q.DO.Session(config))
}

func (q questionJudgeDo) Clauses(conds ...clause.Expression) IQuestionJudgeDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q questionJudgeDo) Returning(value interface{}, columns ...string) IQuestionJudgeDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q questionJudgeDo) Not(conds ...gen.Condition) IQuestionJudgeDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q questionJudgeDo) Or(conds ...gen.Condition) IQuestionJudgeDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q questionJudgeDo) Select(conds ...field.Expr) IQuestionJudgeDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q questionJudgeDo) Where(conds ...gen.Condition) IQuestionJudgeDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q questionJudgeDo) Order(conds ...field.Expr) IQuestionJudgeDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q questionJudgeDo) Distinct(cols ...field.Expr) IQuestionJudgeDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q questionJudgeDo) Omit(cols ...field.Expr) IQuestionJudgeDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q questionJudgeDo) Join(table schema.Tabler, on ...field.Expr) IQuestionJudgeDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q questionJudgeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQuestionJudgeDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q questionJudgeDo) RightJoin(table schema.Tabler, on ...field.Expr) IQuestionJudgeDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q questionJudgeDo) Group(cols ...field.Expr) IQuestionJudgeDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q questionJudgeDo) Having(conds ...gen.Condition) IQuestionJudgeDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q questionJudgeDo) Limit(limit int) IQuestionJudgeDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q questionJudgeDo) Offset(offset int) IQuestionJudgeDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q questionJudgeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQuestionJudgeDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q questionJudgeDo) Unscoped() IQuestionJudgeDo {
	return q.withDO(q.DO.Unscoped())
}

func (q questionJudgeDo) Create(values ...*model.QuestionJudge) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q questionJudgeDo) CreateInBatches(values []*model.QuestionJudge, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q questionJudgeDo) Save(values ...*model.QuestionJudge) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q questionJudgeDo) First() (*model.QuestionJudge, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuestionJudge), nil
	}
}

func (q questionJudgeDo) Take() (*model.QuestionJudge, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuestionJudge), nil
	}
}

func (q questionJudgeDo) Last() (*model.QuestionJudge, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuestionJudge), nil
	}
}

func (q questionJudgeDo) Find() ([]*model.QuestionJudge, error) {
	result, err := q.DO.Find()
	return result.([]*model.QuestionJudge), err
}

func (q questionJudgeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QuestionJudge, err error) {
	buf := make([]*model.QuestionJudge, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q questionJudgeDo) FindInBatches(result *[]*model.QuestionJudge, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q questionJudgeDo) Attrs(attrs ...field.AssignExpr) IQuestionJudgeDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q questionJudgeDo) Assign(attrs ...field.AssignExpr) IQuestionJudgeDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q questionJudgeDo) Joins(fields ...field.RelationField) IQuestionJudgeDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q questionJudgeDo) Preload(fields ...field.RelationField) IQuestionJudgeDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q questionJudgeDo) FirstOrInit() (*model.QuestionJudge, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuestionJudge), nil
	}
}

func (q questionJudgeDo) FirstOrCreate() (*model.QuestionJudge, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuestionJudge), nil
	}
}

func (q questionJudgeDo) FindByPage(offset int, limit int) (result []*model.QuestionJudge, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q questionJudgeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q questionJudgeDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q questionJudgeDo) Delete(models ...*model.QuestionJudge) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *questionJudgeDo) withDO(do gen.Dao) *questionJudgeDo {
	q.DO = *do.(*gen.DO)
	return q
}
