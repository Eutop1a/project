// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.26.1
// source: api/project/v1/knowledge/knowledge.proto

package knowledgev1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	common "helloworld/api/project/v1/common"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationKnowledgeCreateKnowledge = "/project.v1.knowledge.Knowledge/CreateKnowledge"
const OperationKnowledgeDeleteKnowledge = "/project.v1.knowledge.Knowledge/DeleteKnowledge"
const OperationKnowledgeGetKnowledge = "/project.v1.knowledge.Knowledge/GetKnowledge"
const OperationKnowledgeListKnowledge = "/project.v1.knowledge.Knowledge/ListKnowledge"
const OperationKnowledgeUpdateKnowledge = "/project.v1.knowledge.Knowledge/UpdateKnowledge"

type KnowledgeHTTPServer interface {
	CreateKnowledge(context.Context, *CreateKnowledgeReq) (*common.CommonResp, error)
	DeleteKnowledge(context.Context, *DeleteKnowledgeReq) (*common.CommonResp, error)
	GetKnowledge(context.Context, *GetKnowledgeReq) (*GetKnowledgeResp, error)
	ListKnowledge(context.Context, *ListKnowledgeReq) (*ListKnowledgeResp, error)
	UpdateKnowledge(context.Context, *UpdateKnowledgeReq) (*common.CommonResp, error)
}

func RegisterKnowledgeHTTPServer(s *http.Server, srv KnowledgeHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/knowledge/create", _Knowledge_CreateKnowledge0_HTTP_Handler(srv))
	r.PUT("/api/v1/knowledge/update/{id}", _Knowledge_UpdateKnowledge0_HTTP_Handler(srv))
	r.DELETE("/api/v1/knowledge/delete/{id}", _Knowledge_DeleteKnowledge0_HTTP_Handler(srv))
	r.GET("/api/v1/knowledge/get/{id}", _Knowledge_GetKnowledge0_HTTP_Handler(srv))
	r.GET("/api/v1/knowledge/list", _Knowledge_ListKnowledge0_HTTP_Handler(srv))
}

func _Knowledge_CreateKnowledge0_HTTP_Handler(srv KnowledgeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateKnowledgeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKnowledgeCreateKnowledge)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateKnowledge(ctx, req.(*CreateKnowledgeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.CommonResp)
		return ctx.Result(200, reply)
	}
}

func _Knowledge_UpdateKnowledge0_HTTP_Handler(srv KnowledgeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateKnowledgeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKnowledgeUpdateKnowledge)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateKnowledge(ctx, req.(*UpdateKnowledgeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.CommonResp)
		return ctx.Result(200, reply)
	}
}

func _Knowledge_DeleteKnowledge0_HTTP_Handler(srv KnowledgeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteKnowledgeReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKnowledgeDeleteKnowledge)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteKnowledge(ctx, req.(*DeleteKnowledgeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.CommonResp)
		return ctx.Result(200, reply)
	}
}

func _Knowledge_GetKnowledge0_HTTP_Handler(srv KnowledgeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetKnowledgeReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKnowledgeGetKnowledge)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetKnowledge(ctx, req.(*GetKnowledgeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetKnowledgeResp)
		return ctx.Result(200, reply)
	}
}

func _Knowledge_ListKnowledge0_HTTP_Handler(srv KnowledgeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListKnowledgeReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKnowledgeListKnowledge)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListKnowledge(ctx, req.(*ListKnowledgeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListKnowledgeResp)
		return ctx.Result(200, reply)
	}
}

type KnowledgeHTTPClient interface {
	CreateKnowledge(ctx context.Context, req *CreateKnowledgeReq, opts ...http.CallOption) (rsp *common.CommonResp, err error)
	DeleteKnowledge(ctx context.Context, req *DeleteKnowledgeReq, opts ...http.CallOption) (rsp *common.CommonResp, err error)
	GetKnowledge(ctx context.Context, req *GetKnowledgeReq, opts ...http.CallOption) (rsp *GetKnowledgeResp, err error)
	ListKnowledge(ctx context.Context, req *ListKnowledgeReq, opts ...http.CallOption) (rsp *ListKnowledgeResp, err error)
	UpdateKnowledge(ctx context.Context, req *UpdateKnowledgeReq, opts ...http.CallOption) (rsp *common.CommonResp, err error)
}

type KnowledgeHTTPClientImpl struct {
	cc *http.Client
}

func NewKnowledgeHTTPClient(client *http.Client) KnowledgeHTTPClient {
	return &KnowledgeHTTPClientImpl{client}
}

func (c *KnowledgeHTTPClientImpl) CreateKnowledge(ctx context.Context, in *CreateKnowledgeReq, opts ...http.CallOption) (*common.CommonResp, error) {
	var out common.CommonResp
	pattern := "/api/v1/knowledge/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationKnowledgeCreateKnowledge))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KnowledgeHTTPClientImpl) DeleteKnowledge(ctx context.Context, in *DeleteKnowledgeReq, opts ...http.CallOption) (*common.CommonResp, error) {
	var out common.CommonResp
	pattern := "/api/v1/knowledge/delete/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationKnowledgeDeleteKnowledge))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KnowledgeHTTPClientImpl) GetKnowledge(ctx context.Context, in *GetKnowledgeReq, opts ...http.CallOption) (*GetKnowledgeResp, error) {
	var out GetKnowledgeResp
	pattern := "/api/v1/knowledge/get/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationKnowledgeGetKnowledge))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KnowledgeHTTPClientImpl) ListKnowledge(ctx context.Context, in *ListKnowledgeReq, opts ...http.CallOption) (*ListKnowledgeResp, error) {
	var out ListKnowledgeResp
	pattern := "/api/v1/knowledge/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationKnowledgeListKnowledge))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KnowledgeHTTPClientImpl) UpdateKnowledge(ctx context.Context, in *UpdateKnowledgeReq, opts ...http.CallOption) (*common.CommonResp, error) {
	var out common.CommonResp
	pattern := "/api/v1/knowledge/update/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationKnowledgeUpdateKnowledge))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
