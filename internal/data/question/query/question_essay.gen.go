// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"helloworld/internal/data/question/model"
)

func newQuestionEssay(db *gorm.DB, opts ...gen.DOOption) questionEssay {
	_questionEssay := questionEssay{}

	_questionEssay.questionEssayDo.UseDB(db, opts...)
	_questionEssay.questionEssayDo.UseModel(&model.QuestionEssay{})

	tableName := _questionEssay.questionEssayDo.TableName()
	_questionEssay.ALL = field.NewAsterisk(tableName)
	_questionEssay.ID = field.NewInt64(tableName, "id")
	_questionEssay.Reference = field.NewString(tableName, "reference")

	_questionEssay.fillFieldMap()

	return _questionEssay
}

type questionEssay struct {
	questionEssayDo

	ALL       field.Asterisk
	ID        field.Int64
	Reference field.String // 参考答案

	fieldMap map[string]field.Expr
}

func (q questionEssay) Table(newTableName string) *questionEssay {
	q.questionEssayDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q questionEssay) As(alias string) *questionEssay {
	q.questionEssayDo.DO = *(q.questionEssayDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *questionEssay) updateTableName(table string) *questionEssay {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt64(table, "id")
	q.Reference = field.NewString(table, "reference")

	q.fillFieldMap()

	return q
}

func (q *questionEssay) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *questionEssay) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 2)
	q.fieldMap["id"] = q.ID
	q.fieldMap["reference"] = q.Reference
}

func (q questionEssay) clone(db *gorm.DB) questionEssay {
	q.questionEssayDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q questionEssay) replaceDB(db *gorm.DB) questionEssay {
	q.questionEssayDo.ReplaceDB(db)
	return q
}

type questionEssayDo struct{ gen.DO }

type IQuestionEssayDo interface {
	gen.SubQuery
	Debug() IQuestionEssayDo
	WithContext(ctx context.Context) IQuestionEssayDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQuestionEssayDo
	WriteDB() IQuestionEssayDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQuestionEssayDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQuestionEssayDo
	Not(conds ...gen.Condition) IQuestionEssayDo
	Or(conds ...gen.Condition) IQuestionEssayDo
	Select(conds ...field.Expr) IQuestionEssayDo
	Where(conds ...gen.Condition) IQuestionEssayDo
	Order(conds ...field.Expr) IQuestionEssayDo
	Distinct(cols ...field.Expr) IQuestionEssayDo
	Omit(cols ...field.Expr) IQuestionEssayDo
	Join(table schema.Tabler, on ...field.Expr) IQuestionEssayDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQuestionEssayDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQuestionEssayDo
	Group(cols ...field.Expr) IQuestionEssayDo
	Having(conds ...gen.Condition) IQuestionEssayDo
	Limit(limit int) IQuestionEssayDo
	Offset(offset int) IQuestionEssayDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQuestionEssayDo
	Unscoped() IQuestionEssayDo
	Create(values ...*model.QuestionEssay) error
	CreateInBatches(values []*model.QuestionEssay, batchSize int) error
	Save(values ...*model.QuestionEssay) error
	First() (*model.QuestionEssay, error)
	Take() (*model.QuestionEssay, error)
	Last() (*model.QuestionEssay, error)
	Find() ([]*model.QuestionEssay, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QuestionEssay, err error)
	FindInBatches(result *[]*model.QuestionEssay, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QuestionEssay) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQuestionEssayDo
	Assign(attrs ...field.AssignExpr) IQuestionEssayDo
	Joins(fields ...field.RelationField) IQuestionEssayDo
	Preload(fields ...field.RelationField) IQuestionEssayDo
	FirstOrInit() (*model.QuestionEssay, error)
	FirstOrCreate() (*model.QuestionEssay, error)
	FindByPage(offset int, limit int) (result []*model.QuestionEssay, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQuestionEssayDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q questionEssayDo) Debug() IQuestionEssayDo {
	return q.withDO(q.DO.Debug())
}

func (q questionEssayDo) WithContext(ctx context.Context) IQuestionEssayDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q questionEssayDo) ReadDB() IQuestionEssayDo {
	return q.Clauses(dbresolver.Read)
}

func (q questionEssayDo) WriteDB() IQuestionEssayDo {
	return q.Clauses(dbresolver.Write)
}

func (q questionEssayDo) Session(config *gorm.Session) IQuestionEssayDo {
	return q.withDO(q.DO.Session(config))
}

func (q questionEssayDo) Clauses(conds ...clause.Expression) IQuestionEssayDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q questionEssayDo) Returning(value interface{}, columns ...string) IQuestionEssayDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q questionEssayDo) Not(conds ...gen.Condition) IQuestionEssayDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q questionEssayDo) Or(conds ...gen.Condition) IQuestionEssayDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q questionEssayDo) Select(conds ...field.Expr) IQuestionEssayDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q questionEssayDo) Where(conds ...gen.Condition) IQuestionEssayDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q questionEssayDo) Order(conds ...field.Expr) IQuestionEssayDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q questionEssayDo) Distinct(cols ...field.Expr) IQuestionEssayDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q questionEssayDo) Omit(cols ...field.Expr) IQuestionEssayDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q questionEssayDo) Join(table schema.Tabler, on ...field.Expr) IQuestionEssayDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q questionEssayDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQuestionEssayDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q questionEssayDo) RightJoin(table schema.Tabler, on ...field.Expr) IQuestionEssayDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q questionEssayDo) Group(cols ...field.Expr) IQuestionEssayDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q questionEssayDo) Having(conds ...gen.Condition) IQuestionEssayDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q questionEssayDo) Limit(limit int) IQuestionEssayDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q questionEssayDo) Offset(offset int) IQuestionEssayDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q questionEssayDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQuestionEssayDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q questionEssayDo) Unscoped() IQuestionEssayDo {
	return q.withDO(q.DO.Unscoped())
}

func (q questionEssayDo) Create(values ...*model.QuestionEssay) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q questionEssayDo) CreateInBatches(values []*model.QuestionEssay, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q questionEssayDo) Save(values ...*model.QuestionEssay) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q questionEssayDo) First() (*model.QuestionEssay, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuestionEssay), nil
	}
}

func (q questionEssayDo) Take() (*model.QuestionEssay, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuestionEssay), nil
	}
}

func (q questionEssayDo) Last() (*model.QuestionEssay, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuestionEssay), nil
	}
}

func (q questionEssayDo) Find() ([]*model.QuestionEssay, error) {
	result, err := q.DO.Find()
	return result.([]*model.QuestionEssay), err
}

func (q questionEssayDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QuestionEssay, err error) {
	buf := make([]*model.QuestionEssay, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q questionEssayDo) FindInBatches(result *[]*model.QuestionEssay, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q questionEssayDo) Attrs(attrs ...field.AssignExpr) IQuestionEssayDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q questionEssayDo) Assign(attrs ...field.AssignExpr) IQuestionEssayDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q questionEssayDo) Joins(fields ...field.RelationField) IQuestionEssayDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q questionEssayDo) Preload(fields ...field.RelationField) IQuestionEssayDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q questionEssayDo) FirstOrInit() (*model.QuestionEssay, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuestionEssay), nil
	}
}

func (q questionEssayDo) FirstOrCreate() (*model.QuestionEssay, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuestionEssay), nil
	}
}

func (q questionEssayDo) FindByPage(offset int, limit int) (result []*model.QuestionEssay, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q questionEssayDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q questionEssayDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q questionEssayDo) Delete(models ...*model.QuestionEssay) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *questionEssayDo) withDO(do gen.Dao) *questionEssayDo {
	q.DO = *do.(*gen.DO)
	return q
}
