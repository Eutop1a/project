// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q              = new(Query)
	ExamPaper      *examPaper
	QuestionBase   *questionBase
	QuestionChoice *questionChoice
	QuestionEssay  *questionEssay
	QuestionFill   *questionFill
	QuestionJudge  *questionJudge
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	ExamPaper = &Q.ExamPaper
	QuestionBase = &Q.QuestionBase
	QuestionChoice = &Q.QuestionChoice
	QuestionEssay = &Q.QuestionEssay
	QuestionFill = &Q.QuestionFill
	QuestionJudge = &Q.QuestionJudge
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:             db,
		ExamPaper:      newExamPaper(db, opts...),
		QuestionBase:   newQuestionBase(db, opts...),
		QuestionChoice: newQuestionChoice(db, opts...),
		QuestionEssay:  newQuestionEssay(db, opts...),
		QuestionFill:   newQuestionFill(db, opts...),
		QuestionJudge:  newQuestionJudge(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	ExamPaper      examPaper
	QuestionBase   questionBase
	QuestionChoice questionChoice
	QuestionEssay  questionEssay
	QuestionFill   questionFill
	QuestionJudge  questionJudge
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		ExamPaper:      q.ExamPaper.clone(db),
		QuestionBase:   q.QuestionBase.clone(db),
		QuestionChoice: q.QuestionChoice.clone(db),
		QuestionEssay:  q.QuestionEssay.clone(db),
		QuestionFill:   q.QuestionFill.clone(db),
		QuestionJudge:  q.QuestionJudge.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		ExamPaper:      q.ExamPaper.replaceDB(db),
		QuestionBase:   q.QuestionBase.replaceDB(db),
		QuestionChoice: q.QuestionChoice.replaceDB(db),
		QuestionEssay:  q.QuestionEssay.replaceDB(db),
		QuestionFill:   q.QuestionFill.replaceDB(db),
		QuestionJudge:  q.QuestionJudge.replaceDB(db),
	}
}

type queryCtx struct {
	ExamPaper      IExamPaperDo
	QuestionBase   IQuestionBaseDo
	QuestionChoice IQuestionChoiceDo
	QuestionEssay  IQuestionEssayDo
	QuestionFill   IQuestionFillDo
	QuestionJudge  IQuestionJudgeDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		ExamPaper:      q.ExamPaper.WithContext(ctx),
		QuestionBase:   q.QuestionBase.WithContext(ctx),
		QuestionChoice: q.QuestionChoice.WithContext(ctx),
		QuestionEssay:  q.QuestionEssay.WithContext(ctx),
		QuestionFill:   q.QuestionFill.WithContext(ctx),
		QuestionJudge:  q.QuestionJudge.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
