// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: api/project/v1/question/question.proto

package questionv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	common "helloworld/api/project/v1/common"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Question_CreateQuestionChoice_FullMethodName = "/project.v1.question.Question/CreateQuestionChoice"
	Question_CreateQuestionFill_FullMethodName   = "/project.v1.question.Question/CreateQuestionFill"
	Question_CreateQuestionJudge_FullMethodName  = "/project.v1.question.Question/CreateQuestionJudge"
	Question_CreateQuestionEssay_FullMethodName  = "/project.v1.question.Question/CreateQuestionEssay"
	Question_DeleteQuestion_FullMethodName       = "/project.v1.question.Question/DeleteQuestion"
	Question_UpdateQuestionChoice_FullMethodName = "/project.v1.question.Question/UpdateQuestionChoice"
	Question_UpdateQuestionFill_FullMethodName   = "/project.v1.question.Question/UpdateQuestionFill"
	Question_UpdateQuestionJudge_FullMethodName  = "/project.v1.question.Question/UpdateQuestionJudge"
	Question_UpdateQuestionEssay_FullMethodName  = "/project.v1.question.Question/UpdateQuestionEssay"
	Question_GetQuestionList_FullMethodName      = "/project.v1.question.Question/GetQuestionList"
)

// QuestionClient is the client API for Question service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuestionClient interface {
	// 创建选择题
	CreateQuestionChoice(ctx context.Context, in *QuestionChoiceInfo, opts ...grpc.CallOption) (*common.CommonResp, error)
	// 创建填空题
	CreateQuestionFill(ctx context.Context, in *QuestionFillInfo, opts ...grpc.CallOption) (*common.CommonResp, error)
	// 创建判断题
	CreateQuestionJudge(ctx context.Context, in *QuestionJudgeInfo, opts ...grpc.CallOption) (*common.CommonResp, error)
	// 创建简答题/大题
	CreateQuestionEssay(ctx context.Context, in *QuestionEssayInfo, opts ...grpc.CallOption) (*common.CommonResp, error)
	// 删除题目
	DeleteQuestion(ctx context.Context, in *DeleteQuestionReq, opts ...grpc.CallOption) (*common.CommonResp, error)
	// 更新选择题
	UpdateQuestionChoice(ctx context.Context, in *QuestionChoiceInfo, opts ...grpc.CallOption) (*common.CommonResp, error)
	// 更新填空题
	UpdateQuestionFill(ctx context.Context, in *QuestionFillInfo, opts ...grpc.CallOption) (*common.CommonResp, error)
	// 更新判断题
	UpdateQuestionJudge(ctx context.Context, in *QuestionJudgeInfo, opts ...grpc.CallOption) (*common.CommonResp, error)
	// 更新简答题/大题
	UpdateQuestionEssay(ctx context.Context, in *QuestionEssayInfo, opts ...grpc.CallOption) (*common.CommonResp, error)
	// 获取题目列表
	GetQuestionList(ctx context.Context, in *GetQuestionListReq, opts ...grpc.CallOption) (*GetQuestionListResp, error)
}

type questionClient struct {
	cc grpc.ClientConnInterface
}

func NewQuestionClient(cc grpc.ClientConnInterface) QuestionClient {
	return &questionClient{cc}
}

func (c *questionClient) CreateQuestionChoice(ctx context.Context, in *QuestionChoiceInfo, opts ...grpc.CallOption) (*common.CommonResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.CommonResp)
	err := c.cc.Invoke(ctx, Question_CreateQuestionChoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionClient) CreateQuestionFill(ctx context.Context, in *QuestionFillInfo, opts ...grpc.CallOption) (*common.CommonResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.CommonResp)
	err := c.cc.Invoke(ctx, Question_CreateQuestionFill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionClient) CreateQuestionJudge(ctx context.Context, in *QuestionJudgeInfo, opts ...grpc.CallOption) (*common.CommonResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.CommonResp)
	err := c.cc.Invoke(ctx, Question_CreateQuestionJudge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionClient) CreateQuestionEssay(ctx context.Context, in *QuestionEssayInfo, opts ...grpc.CallOption) (*common.CommonResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.CommonResp)
	err := c.cc.Invoke(ctx, Question_CreateQuestionEssay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionClient) DeleteQuestion(ctx context.Context, in *DeleteQuestionReq, opts ...grpc.CallOption) (*common.CommonResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.CommonResp)
	err := c.cc.Invoke(ctx, Question_DeleteQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionClient) UpdateQuestionChoice(ctx context.Context, in *QuestionChoiceInfo, opts ...grpc.CallOption) (*common.CommonResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.CommonResp)
	err := c.cc.Invoke(ctx, Question_UpdateQuestionChoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionClient) UpdateQuestionFill(ctx context.Context, in *QuestionFillInfo, opts ...grpc.CallOption) (*common.CommonResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.CommonResp)
	err := c.cc.Invoke(ctx, Question_UpdateQuestionFill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionClient) UpdateQuestionJudge(ctx context.Context, in *QuestionJudgeInfo, opts ...grpc.CallOption) (*common.CommonResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.CommonResp)
	err := c.cc.Invoke(ctx, Question_UpdateQuestionJudge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionClient) UpdateQuestionEssay(ctx context.Context, in *QuestionEssayInfo, opts ...grpc.CallOption) (*common.CommonResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.CommonResp)
	err := c.cc.Invoke(ctx, Question_UpdateQuestionEssay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionClient) GetQuestionList(ctx context.Context, in *GetQuestionListReq, opts ...grpc.CallOption) (*GetQuestionListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQuestionListResp)
	err := c.cc.Invoke(ctx, Question_GetQuestionList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuestionServer is the server API for Question service.
// All implementations must embed UnimplementedQuestionServer
// for forward compatibility.
type QuestionServer interface {
	// 创建选择题
	CreateQuestionChoice(context.Context, *QuestionChoiceInfo) (*common.CommonResp, error)
	// 创建填空题
	CreateQuestionFill(context.Context, *QuestionFillInfo) (*common.CommonResp, error)
	// 创建判断题
	CreateQuestionJudge(context.Context, *QuestionJudgeInfo) (*common.CommonResp, error)
	// 创建简答题/大题
	CreateQuestionEssay(context.Context, *QuestionEssayInfo) (*common.CommonResp, error)
	// 删除题目
	DeleteQuestion(context.Context, *DeleteQuestionReq) (*common.CommonResp, error)
	// 更新选择题
	UpdateQuestionChoice(context.Context, *QuestionChoiceInfo) (*common.CommonResp, error)
	// 更新填空题
	UpdateQuestionFill(context.Context, *QuestionFillInfo) (*common.CommonResp, error)
	// 更新判断题
	UpdateQuestionJudge(context.Context, *QuestionJudgeInfo) (*common.CommonResp, error)
	// 更新简答题/大题
	UpdateQuestionEssay(context.Context, *QuestionEssayInfo) (*common.CommonResp, error)
	// 获取题目列表
	GetQuestionList(context.Context, *GetQuestionListReq) (*GetQuestionListResp, error)
	mustEmbedUnimplementedQuestionServer()
}

// UnimplementedQuestionServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQuestionServer struct{}

func (UnimplementedQuestionServer) CreateQuestionChoice(context.Context, *QuestionChoiceInfo) (*common.CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestionChoice not implemented")
}
func (UnimplementedQuestionServer) CreateQuestionFill(context.Context, *QuestionFillInfo) (*common.CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestionFill not implemented")
}
func (UnimplementedQuestionServer) CreateQuestionJudge(context.Context, *QuestionJudgeInfo) (*common.CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestionJudge not implemented")
}
func (UnimplementedQuestionServer) CreateQuestionEssay(context.Context, *QuestionEssayInfo) (*common.CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestionEssay not implemented")
}
func (UnimplementedQuestionServer) DeleteQuestion(context.Context, *DeleteQuestionReq) (*common.CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuestion not implemented")
}
func (UnimplementedQuestionServer) UpdateQuestionChoice(context.Context, *QuestionChoiceInfo) (*common.CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuestionChoice not implemented")
}
func (UnimplementedQuestionServer) UpdateQuestionFill(context.Context, *QuestionFillInfo) (*common.CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuestionFill not implemented")
}
func (UnimplementedQuestionServer) UpdateQuestionJudge(context.Context, *QuestionJudgeInfo) (*common.CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuestionJudge not implemented")
}
func (UnimplementedQuestionServer) UpdateQuestionEssay(context.Context, *QuestionEssayInfo) (*common.CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuestionEssay not implemented")
}
func (UnimplementedQuestionServer) GetQuestionList(context.Context, *GetQuestionListReq) (*GetQuestionListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestionList not implemented")
}
func (UnimplementedQuestionServer) mustEmbedUnimplementedQuestionServer() {}
func (UnimplementedQuestionServer) testEmbeddedByValue()                  {}

// UnsafeQuestionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuestionServer will
// result in compilation errors.
type UnsafeQuestionServer interface {
	mustEmbedUnimplementedQuestionServer()
}

func RegisterQuestionServer(s grpc.ServiceRegistrar, srv QuestionServer) {
	// If the following call pancis, it indicates UnimplementedQuestionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Question_ServiceDesc, srv)
}

func _Question_CreateQuestionChoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionChoiceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServer).CreateQuestionChoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Question_CreateQuestionChoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServer).CreateQuestionChoice(ctx, req.(*QuestionChoiceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Question_CreateQuestionFill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionFillInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServer).CreateQuestionFill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Question_CreateQuestionFill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServer).CreateQuestionFill(ctx, req.(*QuestionFillInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Question_CreateQuestionJudge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionJudgeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServer).CreateQuestionJudge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Question_CreateQuestionJudge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServer).CreateQuestionJudge(ctx, req.(*QuestionJudgeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Question_CreateQuestionEssay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionEssayInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServer).CreateQuestionEssay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Question_CreateQuestionEssay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServer).CreateQuestionEssay(ctx, req.(*QuestionEssayInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Question_DeleteQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQuestionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServer).DeleteQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Question_DeleteQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServer).DeleteQuestion(ctx, req.(*DeleteQuestionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Question_UpdateQuestionChoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionChoiceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServer).UpdateQuestionChoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Question_UpdateQuestionChoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServer).UpdateQuestionChoice(ctx, req.(*QuestionChoiceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Question_UpdateQuestionFill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionFillInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServer).UpdateQuestionFill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Question_UpdateQuestionFill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServer).UpdateQuestionFill(ctx, req.(*QuestionFillInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Question_UpdateQuestionJudge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionJudgeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServer).UpdateQuestionJudge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Question_UpdateQuestionJudge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServer).UpdateQuestionJudge(ctx, req.(*QuestionJudgeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Question_UpdateQuestionEssay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionEssayInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServer).UpdateQuestionEssay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Question_UpdateQuestionEssay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServer).UpdateQuestionEssay(ctx, req.(*QuestionEssayInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Question_GetQuestionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServer).GetQuestionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Question_GetQuestionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServer).GetQuestionList(ctx, req.(*GetQuestionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Question_ServiceDesc is the grpc.ServiceDesc for Question service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Question_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "project.v1.question.Question",
	HandlerType: (*QuestionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQuestionChoice",
			Handler:    _Question_CreateQuestionChoice_Handler,
		},
		{
			MethodName: "CreateQuestionFill",
			Handler:    _Question_CreateQuestionFill_Handler,
		},
		{
			MethodName: "CreateQuestionJudge",
			Handler:    _Question_CreateQuestionJudge_Handler,
		},
		{
			MethodName: "CreateQuestionEssay",
			Handler:    _Question_CreateQuestionEssay_Handler,
		},
		{
			MethodName: "DeleteQuestion",
			Handler:    _Question_DeleteQuestion_Handler,
		},
		{
			MethodName: "UpdateQuestionChoice",
			Handler:    _Question_UpdateQuestionChoice_Handler,
		},
		{
			MethodName: "UpdateQuestionFill",
			Handler:    _Question_UpdateQuestionFill_Handler,
		},
		{
			MethodName: "UpdateQuestionJudge",
			Handler:    _Question_UpdateQuestionJudge_Handler,
		},
		{
			MethodName: "UpdateQuestionEssay",
			Handler:    _Question_UpdateQuestionEssay_Handler,
		},
		{
			MethodName: "GetQuestionList",
			Handler:    _Question_GetQuestionList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/project/v1/question/question.proto",
}
